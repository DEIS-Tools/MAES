# Copyright (c) 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

from ament_index_python.packages import get_package_share_directory

from launch import LaunchDescription
from launch.actions import (DeclareLaunchArgument, GroupAction,
                            IncludeLaunchDescription, SetEnvironmentVariable)
from launch.conditions import IfCondition
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import LaunchConfiguration, PythonExpression
from launch_ros.actions import PushRosNamespace
from nav2_common.launch import ReplaceString


def generate_launch_description():
    # Get the launch directory
    package_name = 'maes_ros2_interface'
    package_dir = get_package_share_directory(package_name)
    bringup_dir = get_package_share_directory('nav2_bringup')

    # Create the launch configuration variables
    namespace = LaunchConfiguration('namespace')
    use_namespace = LaunchConfiguration('use_namespace')
    slam = LaunchConfiguration('slam')
    use_sim_time = LaunchConfiguration('use_sim_time')
    params_file = LaunchConfiguration('params_file')
    autostart = LaunchConfiguration('autostart')
    # Maes params
    raytrace_range = LaunchConfiguration('raytrace_range')
    robot_radius = LaunchConfiguration('robot_radius')
    # TODO: For some reason the global costmap does not dynamically resize.
    #  Instead we dynamically make the size of the map generated by MAES
    global_costmap_width = LaunchConfiguration('global_costmap_width')
    global_costmap_height = LaunchConfiguration('global_costmap_height')
    global_costmap_origin_x = LaunchConfiguration('global_costmap_origin_x')
    global_costmap_origin_y = LaunchConfiguration('global_costmap_origin_y')

    maes_injected_params_file = ReplaceString(
        source_file=params_file,
        replacements={'<robot_namespace>': ('', namespace),
                      '<raytrace_range>': ('', raytrace_range),
                      '<robot_radius>': ('', robot_radius),
                      '<global_costmap_width>': ('', global_costmap_width),
                      '<global_costmap_height>': ('', global_costmap_height),
                      '<global_costmap_origin_x>': ('', global_costmap_origin_x),
                      '<global_costmap_origin_y>': ('', global_costmap_origin_y)})

    stdout_linebuf_envvar = SetEnvironmentVariable(
        'RCUTILS_LOGGING_BUFFERED_STREAM', '1')

    # Maes launch arguments
    declare_raytrace_range_cmd = DeclareLaunchArgument(
        'raytrace_range',
        description='Raytrace range for the given robot')
    declare_robot_radius_cmd = DeclareLaunchArgument(
        'robot_radius',
        description='Radius of the robot. Affects path planning')
    declare_global_costmap_width = DeclareLaunchArgument(
        'global_costmap_width',
        description='Ensures that global costmap is set to the same width as in the MAES simulation')
    declare_global_costmap_height = DeclareLaunchArgument(
        'global_costmap_height',
        description='Ensures that global costmap is set to the same height as in the MAES simulation')
    declare_global_costmap_origin_x = DeclareLaunchArgument(
        'global_costmap_origin_x',
        description='Offsets the map in the x direction to ensure availability until map border')
    declare_global_costmap_origin_y = DeclareLaunchArgument(
        'global_costmap_origin_y',
        description='Offsets the map in the y direction to ensure availability until map border')

    # ROS launch arguments
    declare_namespace_cmd = DeclareLaunchArgument(
        'namespace',
        default_value='',
        description='Top-level namespace')


    declare_use_namespace_cmd = DeclareLaunchArgument(
        'use_namespace',
        default_value='false',
        description='Whether to apply a namespace to the navigation stack')

    declare_slam_cmd = DeclareLaunchArgument(
        'slam',
        default_value='True',
        description='Whether run a SLAM')

    declare_use_sim_time_cmd = DeclareLaunchArgument(
        'use_sim_time',
        default_value='false',
        description='Use simulation (Gazebo) clock if true')

    declare_params_file_cmd = DeclareLaunchArgument(
        'params_file',
        default_value=os.path.join(bringup_dir, 'params', 'nav2_params.yaml'),
        description='Full path to the ROS2 parameters file to use for all launched nodes')

    declare_autostart_cmd = DeclareLaunchArgument(
        'autostart', default_value='true',
        description='Automatically startup the nav2 stack')

    # Specify the actions
    bringup_cmd_group = GroupAction([
        PushRosNamespace(
            condition=IfCondition(use_namespace),
            namespace=namespace),

        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(os.path.join(package_dir, 'maes_slam_launch.py')),
            condition=IfCondition(slam),
            launch_arguments={'namespace': namespace,
                              'use_sim_time': use_sim_time,
                              'autostart': autostart,
                              'params_file': maes_injected_params_file}.items()),

        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(os.path.join(bringup_dir, 'launch', 'navigation_launch.py')),
            launch_arguments={'namespace': namespace,
                              'use_sim_time': use_sim_time,
                              'autostart': autostart,
                              'params_file': maes_injected_params_file,
                              'use_lifecycle_mgr': 'false',
                              'map_subscribe_transient_local': 'true'}.items()),
    ])

    # Create the launch description and populate
    ld = LaunchDescription()

    # Set environment variables
    ld.add_action(stdout_linebuf_envvar)

    # Declare the launch options
    ld.add_action(declare_namespace_cmd)
    ld.add_action(declare_use_namespace_cmd)
    ld.add_action(declare_slam_cmd)
    ld.add_action(declare_use_sim_time_cmd)
    ld.add_action(declare_params_file_cmd)
    ld.add_action(declare_autostart_cmd)
    # Declare maes launch options
    ld.add_action(declare_raytrace_range_cmd)
    ld.add_action(declare_robot_radius_cmd)
    ld.add_action(declare_global_costmap_width)
    ld.add_action(declare_global_costmap_height)
    ld.add_action(declare_global_costmap_origin_x)
    ld.add_action(declare_global_costmap_origin_y)

    ld.add_action(bringup_cmd_group)

    return ld
